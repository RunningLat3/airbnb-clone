// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?   @map("hashed_password")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("update_at")
  favoriteIds    String[]  @map("favorite_ids") @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String   @map("image_src")
  createdAt     DateTime @default(now()) @map("created_at")
  category      String
  roomCount     Int      @map("room_count")
  bathroomCount Int      @map("bathroom_count")
  guestCount    Int      @map("guest_count")
  locationValue String   @map("location_value")
  userId        String   @map("user_id") @db.ObjectId
  price         Int

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]

  @@map("listings")
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?  @map("user_id") @db.ObjectId
  listingId  String?  @map("listing_id") @db.ObjectId
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  totalPrice Int      @map("total_price")
  createdAt  DateTime @default(now()) @map("created_at")

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("reservations")
}
